<h3>@L["Label.ImportData"]</h3>
<div class="input-group mb-3">
    <span class="input-group-text"><i class="bi bi-github"></i>&nbsp;@L["Label.FromGithub"]</span>
    <select class="form-control" @onchange="OnFileSelectionChange">
        <option value="">@L["Label.NothingSelected"]</option>
        @foreach (KeyValuePair<string, string> fileEntry in DataContext.MetadataFiles)
        {
            <option value="@fileEntry.Value">@L[fileEntry.Key]</option>
        }
    </select>
</div>

<div class="mb-3">
    <label for="formUrl" class="form-label">@L["Label.ImportFromURL"]</label>
    <div class="input-group mb-3">
        <span class="input-group-text"><i class="bi bi-download"></i>&nbsp;URL:</span>
        <input class="form-control"
               id="formUrl"
               @bind="DataContext.MetadataFileURL" />
        <button type="button"
                class="btn btn-success"
                @onclick="() => DataContext.ImportSpecIfFromUrlCommand.Execute(null)">
            @L["Button.Import"]
        </button>
    </div>
</div>

<div class="mb-3">
    <label for="formFile" class="form-label">@L["Label.ImportFromFile"]</label>
    <div class="input-group mb-3">
        <button type="button"
                class="btn btn-primary"
                @onclick="OnSelectFileClicked">
            @L["Button.SelectFile"]
        </button>
        <input class="form-control"
               id="formFile"
               @bind="DataContext.LocalFilename"
               readonly>
        <button type="button"
                class="btn btn-success"
                @onclick="() => DataContext.ImportSpecIfFromFileCommand.Execute(null)">
            @L["Button.Import"]
        </button>
    </div>
</div>
<h4>@L["Title.Options"]</h4>
<div class="form-check">
    <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind="DataContext.OverrideExistingData">
    <label class="form-check-label" for="flexCheckDefault">
        @L["Label.OverrideExisting"]
    </label>
</div>

@if (DataContext.IsImportingData)
{
    <div>
        <span class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>

        </span>
        <span>&nbsp;@L[DataContext.ProgressMessageKey]</span>
    </div>
}

@if(!string.IsNullOrEmpty(DataContext.SuccessMessageKey))
{
    <div class="successMessage">
        <span>@L[DataContext.SuccessMessageKey]</span>
    </div>
}

@if(!string.IsNullOrEmpty(DataContext.ErrorMessageKey))
{
    <div class="errorMessage">
        <span>@L[DataContext.ErrorMessageKey]</span>
    </div>
    @if(@DataContext.Exception != null)
    {
        <div>
            <span>@DataContext.Exception.ToString()</span><br />
            <span>@DataContext.Exception.StackTrace</span>
        </div>
    }
}
